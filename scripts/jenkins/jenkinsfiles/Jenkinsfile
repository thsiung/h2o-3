@Library('test-shared-library') _

final String MODE_PR = 'MODE_PR'
final String MODE_MASTER = 'MODE_MASTER'
final String DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'
final int HEALTH_CHECK_RETRIES = 5

def defineTestStages = null
def pipelineContext = null
String result = 'FAILURE'
def scmEnv = null

final boolean prJob = env.CHANGE_BRANCH != null && env.CHANGE_BRANCH != ''
def mode = null

try {
  ansiColor('xterm') {
    timestamps {

      if (prJob) {
        echo "********* USING PR PIPELINE CONFIGURATION *********"
        cancelPreviousBuilds()
        mode = MODE_PR
      } else {
        echo "********* USING MASTER PIPELINE CONFIGURATION *********"
        mode = MODE_MASTER
      }

      boolean healthCheckPassed = false
      int attempt = 0
      stage('Checkout and Build') {
        while (!healthCheckPassed) {
          attempt += 1
          if (attempt > HEALTH_CHECK_RETRIES) {
            error "Too many attempts to pass initial health check"
          }
          String nodeLabel = DEFAULT_NODE_LABEL
          if (pipelineContext != null) {
            nodeLabel = pipelineContext.getHealthChecker().getHealthyNodesLabel(DEFAULT_NODE_LABEL)
          }
          echo "######### NodeLabel: ${nodeLabel} #########"
          node(nodeLabel) {
            dir('h2o-3') {
              // clear the folder
              deleteDir()
              // checkout H2O-3
              retry(3) {
                timeout(time: 3, unit: 'MINUTES') {
                  echo "###### Checkout H2O-3 ######"
                  scmEnv = checkout scm
                }
              }
            }

            if (pipelineContext == null) {
              def initPipelineContext = load('h2o-3/scripts/jenkins/groovy/initPipelineContext.groovy')
              pipelineContext = initPipelineContext(scmEnv, mode, !prJob)
              pipelineContext.getBuildConfig().setJobProperties(this)
              // Load the defineTestStages script
              defineTestStages = load('h2o-3/scripts/jenkins/groovy/defineTestStages.groovy')
            }
            healthCheckPassed = pipelineContext.getHealthChecker().checkHealth(this, env.NODE_NAME, pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, pipelineContext.getBuildConfig())
            if (healthCheckPassed) {
              // Load build script and execute it
              def buildH2O3 = load('h2o-3/scripts/jenkins/groovy/buildH2O3.groovy')
              buildH2O3(pipelineContext)
            }
          }
        }
      }

      defineTestStages(pipelineContext)
      result = 'SUCCESS'
    }
  }
} finally {
  if (pipelineContext != null) {
    if (!prJob) {
      pipelineContext.getEmailer().sendEmail(this, result, pipelineContext.getBuildSummary().getSummaryHTML(this))
    }
    if (!pipelineContext.getHealthChecker().getHealthProblems().isEmpty()) {
      pipelineContext.getEmailer().sendEmail(this, 'WARNING', pipelineContext.getHealthChecker().toEmail(this, pipelineContext), ['michalr@h2o.ai'])
    }
  }
}

def cancelPreviousBuilds() {
  echo "###### Cancelling all previous builds ######"
  def hi = Hudson.instance
  def pname = env.JOB_NAME.split('/')[0]

  hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each{ build ->
    def exec = build.getExecutor()

    if (build.number != currentBuild.number && exec != null) {
      exec.doStop()
      println("Aborted previous running build #${build.number}")
    }
  }
}